<?php
// $Id: feeds.module,v 1.74.2.4 2010/10/01 17:45:18 alexb Exp $

/**
 * @file
 * Feeds - basic API functions and hook implementations.
 */

// Common request time, use as point of reference and to avoid calls to time().
define('FEEDS_REQUEST_TIME', time());
// Do not schedule a feed for refresh.
define('FEEDS_SCHEDULE_NEVER', -1);
// Never expire feed items.
define('FEEDS_EXPIRE_NEVER', -1);
// An object that is not persistent. Compare EXPORT_IN_DATABASE, EXPORT_IN_CODE.
define('FEEDS_EXPORT_NONE', 0x0);
// Status of batched operations.
define('FEEDS_BATCH_COMPLETE', 1.0);
define('FEEDS_BATCH_ACTIVE', 0.0);

/**
 * @defgroup hooks Hook and callback implementations
 * @{
 */

/**
 * Implements hook_cron().
 */
function feeds_cron() {
  if ($importers = feeds_reschedule()) {
    foreach ($importers as $id) {
      feeds_importer($id)->schedule();
      $rows = db_query("SELECT feed_nid FROM {feeds_source} WHERE id = :id", array(':id' => $id));
      foreach ($rows as $row) {
        feeds_source($id, $row->feed_nid)->schedule();
      }
    }
    feeds_reschedule(FALSE);
  }
}

/**
 * Implements hook_cron_job_scheduler_info().
 *
 * Compare queue names with key names in feeds_cron_queue_info().
 */
function feeds_cron_job_scheduler_info() {
  $info = array();
  $info['feeds_source_import'] = array(
    'queue name' => 'feeds_source_import',
  );
  $info['feeds_importer_expire'] = array(
    'queue name' => 'feeds_importer_expire',
  );
  return $info;
}

/**
 * Implements hook_cron_queue_info().
 */
function feeds_cron_queue_info() {
  $queues = array();
  $queues['feeds_source_import'] = array(
    'worker callback' => 'feeds_source_import',
    'time' => 15,
  );
  $queues['feeds_importer_expire'] = array(
    'worker callback' => 'feeds_importer_expire',
    'time' => 15,
  );
  return $queues;
}

/**
 * Scheduler callback for importing from a source.
 */
function feeds_source_import($job) {
  $source = feeds_source($job['type'], $job['id']);
  try {
    $source->existing()->import();
  }
  catch (FeedsNotExistingException $e) {}
  catch (Exception $e) {
    watchdog('feeds_source_import()', $e->getMessage(), array(), WATCHDOG_ERROR);
  }
  $source->schedule();
}

/**
 * Scheduler callback for expiring content.
 */
function feeds_importer_expire($job) {
  $importer = feeds_importer($job['type']);
  try {
    $importer->existing()->expire();
  }
  catch (FeedsNotExistingException $e) {}
  catch (Exception $e) {
    watchdog('feeds_importer_expire()', $e->getMessage(), array(), WATCHDOG_ERROR);
  }
  $importer->schedule();
}

/**
 * Reschedule one or all importers.
 *
 * @param $importer_id
 *   If TRUE, all importers will be rescheduled, if FALSE, no importers will
 *   be rescheduled, if an importer id, only importer of that id will be
 *   rescheduled.
 *
 * @return
 *   TRUE if all importers need rescheduling. FALSE if no rescheduling is
 *   required. An array of importers that need rescheduling.
 */
function feeds_reschedule($importer_id = NULL) {
  $reschedule = variable_get('feeds_reschedule', FALSE);
  if ($importer_id === TRUE || $importer_id === FALSE) {
    $reschedule = $importer_id;
  }
  elseif (is_string($importer_id) && $reschedule !== TRUE) {
    $reschedule = is_array($reschedule) ? $reschedule : array();
    $reschedule[$importer_id] = $importer_id;
  }
  variable_set('feeds_reschedule', $reschedule);
  if ($reschedule === TRUE) {
    return feeds_enabled_importers();
  }
  return $reschedule;
}

/**
 * Implements feeds_permission().
 */
function feeds_permission() {
  $perms = array(
    'administer feeds' => array(
      'title' => t('Administer Feeds'),
      'description' => t('Create, update, delete importers, execute import and delete tasks on any importer.')
    ),
  );
  foreach (feeds_importer_load_all() as $importer) {
    $perms["import $importer->id feeds"] = array(
      'title' => t('Import @name feeds', array('@name' => $importer->config['name'])),
    );
    $perms["clear $importer->id feeds"] = array(
      'title' => t('Delete items from @name feeds', array('@name' => $importer->config['name'])),
    );
  }
  return $perms;
}

/**
 * Implements hook_forms().
 *
 * Declare form callbacks for all known classes derived from FeedsConfigurable.
 */
function feeds_forms() {
  $forms = array();
  $forms['FeedsImporter_feeds_form']['callback'] = 'feeds_form';
  $plugins = FeedsPlugin::all();
  foreach ($plugins as $plugin) {
    $forms[$plugin['handler']['class'] .'_feeds_form']['callback'] = 'feeds_form';
  }
  return $forms;
}

/**
 * Implements hook_menu().
 */
function feeds_menu() {
  // Register a callback for all feed configurations that are not attached to a content type.
  $items = array();
  foreach (feeds_importer_load_all() as $importer) {
    if (empty($importer->config['content_type'])) {
      $items['import/'. $importer->id] = array(
        'title' => $importer->config['name'],
        'page callback' => 'drupal_get_form',
        'page arguments' => array('feeds_import_form', 1),
        'access callback' => 'feeds_access',
        'access arguments' => array('import', $importer->id),
        'file' => 'feeds.pages.inc',
      );
      $items['import/'. $importer->id .'/import'] = array(
        'title' => 'Import',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => -10,
      );
      $items['import/'. $importer->id .'/delete-items'] = array(
        'title' => 'Delete items',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('feeds_delete_tab_form', 1),
        'access callback' => 'feeds_access',
        'access arguments' => array('clear', $importer->id),
        'file' => 'feeds.pages.inc',
        'type' => MENU_LOCAL_TASK,
      );
    }
    else {
      $items['node/%node/import'] = array(
        'title' => 'Import',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('feeds_import_tab_form', 1),
        'access callback' => 'feeds_access',
        'access arguments' => array('import', 1),
        'file' => 'feeds.pages.inc',
        'type' => MENU_LOCAL_TASK,
        'weight' => 10,
      );
      $items['node/%node/delete-items'] = array(
        'title' => 'Delete items',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('feeds_delete_tab_form', NULL, 1),
        'access callback' => 'feeds_access',
        'access arguments' => array('clear', 1),
        'file' => 'feeds.pages.inc',
        'type' => MENU_LOCAL_TASK,
        'weight' => 11,
      );
    }
    $items += $importer->fetcher->menuItem();
    $items['import/' . $importer->id .'/template'] = array(
      'page callback' => 'feeds_importer_template',
      'page arguments' => array(1),
      'access callback' => 'feeds_access',
      'access arguments' => array('import', $importer->id),
      'file' => 'feeds.pages.inc',
      'type' => MENU_CALLBACK,
    );
  }
  if (count($items)) {
    $items['import'] = array(
      'title' => 'Import',
      'page callback' => 'feeds_page',
      'access callback' => 'feeds_page_access',
      'file' => 'feeds.pages.inc',
    );
  }
  return $items;
}

/**
 * Menu loader callback.
 */
function feeds_importer_load($id) {
  return feeds_importer($id);
}

/**
 * Implements hook_theme().
 */
function feeds_theme() {
  return array(
    'feeds_upload' => array(
      'file' => 'feeds.pages.inc',
      'render element' => 'element',
    ),
  );
}

/**
 * Menu access callback.
 *
 * @param $action
 *   One of 'import' or 'clear'.
 * @param $param
 *   Node object or FeedsImporter id.
 */
function feeds_access($action, $param) {
  if (is_string($param)) {
    $importer_id = $param;
  }
  elseif ($param->type) {
    $importer_id = feeds_get_importer_id($param->type);
  }

  // Check for permissions if feed id is present, otherwise return FALSE.
  if ($importer_id) {
    if (user_access('administer feeds') || user_access($action .' '. $importer_id .' feeds')) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Menu access callback.
 */
function feeds_page_access() {
  if (user_access('administer feeds')) {
    return TRUE;
  }
  foreach (feeds_enabled_importers() as $id) {
    if (user_access("import $id feeds")) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_views_api().
 */
function feeds_views_api() {
  return array(
    'api' => '2.0',
    'path' => drupal_get_path('module', 'feeds') .'/views',
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function feeds_ctools_plugin_api($owner, $api) {
  if ($owner == 'feeds' && $api == 'plugins') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function feeds_ctools_plugin_type() {
  return array(
    'plugins' => array(
      'cache' => TRUE,
      'use hooks' => TRUE,
      'classes' => array('handler'),
    ),
  );
}

/**
 * Implements hook_feeds_plugins().
 */
function feeds_feeds_plugins() {
  module_load_include('inc', 'feeds', 'feeds.plugins');
  return _feeds_feeds_plugins();
}

/**
 * Implements hook_node_load().
 */
function feeds_node_load($nodes) {
  _feeds_node_processor_node_load($nodes);
}

/**
 * Implements hook_node_validate().
 */
function feeds_node_validate($node, $form, &$form_state) {
  if (!$importer_id = feeds_get_importer_id($node->type)) {
    return;
  }
  // Keep a copy of the title for subsequent node creation stages.
  // @todo: revisit whether $node still looses all of its properties
  // between validate and insert stage.
  $last_title = &drupal_static('feeds_node_last_title');
  $last_feeds = &drupal_static('feeds_node_last_feeds');

  // On validation stage we are working with a FeedsSource object that is
  // not tied to a nid - when creating a new node there is no
  // $node->nid at this stage.
  $source = feeds_source($importer_id);

  // Node module magically moved $form['feeds'] to $node->feeds :P.
  // configFormValidate may modify $last_feed, smuggle it to update/insert stage
  // through a static variable.
  $last_feeds = $node->feeds;
  $source->configFormValidate($last_feeds);

  // If node title is empty, try to retrieve title from feed.
  if (trim($node->title) == '') {
    try {
      $source->addConfig($last_feeds);
      if (!$last_title = $source->preview()->getTitle()) {
        throw new Exception();
      }
    }
    catch (Exception $e) {
      drupal_set_message($e->getMessage(), 'error');
      form_set_error('title', t('Could not retrieve title from feed.'), 'error');
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function feeds_node_presave($node) {
  // Populate $node->title and $node->feed from result of validation phase.
  $last_title = &drupal_static('feeds_node_last_title');
  $last_feeds = &drupal_static('feeds_node_last_feeds');
  if (empty($node->title) && !empty($last_title)) {
    $node->title = $last_title;
  }
  if (!empty($last_feeds)) {
    $node->feeds = $last_feeds;
  }
  $last_title = NULL;
  $last_feeds = NULL;
}

/**
 * Implements hook_node_insert().
 */
function feeds_node_insert($node) {
  _feeds_node_processor_node_insert($node);
  feeds_node_update($node);
  if ($importer_id = feeds_get_importer_id($node->type)) {
    // Start import if requested.
    if (feeds_importer($importer_id)->config['import_on_create'] && !isset($node->feeds['suppress_import'])) {
      feeds_batch_set(t('Importing'), 'import', $importer_id, $node->nid);
    }
    // Schedule source and importer.
    feeds_source($importer_id, $node->nid)->schedule();
    feeds_importer($importer_id)->schedule();
  }
}

/**
 * Implements hook_node_update().
 */
function feeds_node_update($node) {
  _feeds_node_processor_node_update($node);
  if (!$importer_id = feeds_get_importer_id($node->type)) {
    return;
  }
  // Add configuration to feed source and save.
  $source = feeds_source($importer_id, $node->nid);
  $source->addConfig($node->feeds);
  $source->save();
}

/**
 * Implements hook_node_delete().
 */
function feeds_node_delete($node) {
  _feeds_node_processor_node_delete($node);
  if ($importer_id = feeds_get_importer_id($node->type)) {
    feeds_source($importer_id, $node->nid)->delete();
  }
}

/**
 * FeedsNodeProcessor's hook_node_load().
 */
function _feeds_node_processor_node_load($nodes) {
  if ($items = db_query("SELECT nid, imported, guid, url, feed_nid FROM {feeds_node_item} WHERE nid IN (:nids)", array(':nids' => array_keys($nodes)))) {
    foreach ($items as $item) {
      $nodes[$item->nid]->feeds_node_item = $item;
    }
  }
}

/**
 * FeedsNodeProcessor's hook_node_insert().
 */
function _feeds_node_processor_node_insert($node) {
  if (isset($node->feeds_node_item)) {
    $node->feeds_node_item->nid = $node->nid;
    drupal_write_record('feeds_node_item', $node->feeds_node_item);
  }
}

/**
 * FeedsNodeProcessor's hook_node_update().
 */
function _feeds_node_processor_node_update($node) {
  if (isset($node->feeds_node_item)) {
    $node->feeds_node_item->nid = $node->nid;
    drupal_write_record('feeds_node_item', $node->feeds_node_item, 'nid');
  }
}

/**
 * FeedsNodeProcessor's hook_node_delete().
 */
function _feeds_node_processor_node_delete($node) {
  db_delete('feeds_node_item')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_taxonomy_term_update().
 */
function feeds_taxonomy_term_update($term) {
  if (isset($term->feeds_importer_id)) {
    db_delete('feeds_term_item')
      ->condition('tid', $term->tid)
      ->execute();
  }
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function feeds_taxonomy_term_insert($term) {
  if (isset($term->feeds_importer_id)) {
    $record = array(
      'id' => $term->feeds_importer_id,
      'tid' => $term->tid,
      'feed_nid' => $term->feed_nid,
    );
    drupal_write_record('feeds_term_item', $record);
  }
}

/**
 * Implements hook_taxonomy_delete().
 */
function feeds_taxonomy_term_delete($term) {
  db_delete('feeds_term_item')
    ->condition('tid', $term->tid)
    ->execute();
}

/**
 * Implements hook_form_alter().
 */
function feeds_form_alter(&$form, $form_state, $form_id) {
  if (!empty($form['#node_edit_form'])) {
    if ($importer_id = feeds_get_importer_id($form['type']['#value'])) {
      // Set title to not required, try to retrieve it from feed.
      $form['title']['#required'] = FALSE;
      // Enable uploads.
      $form['#attributes']['enctype'] = 'multipart/form-data';

      // Build form.
      $source = feeds_source($importer_id, empty($form['nid']['#value']) ? 0 : $form['nid']['#value']);
      $form['feeds'] = array(
        '#type' => 'fieldset',
        '#title' => t('Feed'),
        '#tree' => TRUE,
      );
      $form['feeds'] += $source->configForm($form_state);
      $form['#feed_id'] = $importer_id;
    }
  }
}

/**
 * @}
 */

/**
 * @defgroup batch Batch functions
 */

/**
 * Batch helper.
 *
 * @param $title
 *   Title to show to user when executing batch.
 * @param $method
 *   Method to execute on importer; one of 'import', 'clear' or 'expire'.
 * @param $importer_id
 *   Identifier of a FeedsImporter object.
 * @param $feed_nid
 *   If importer is attached to content type, feed node id identifying the
 *   source to be imported.
 */
function feeds_batch_set($title, $method, $importer_id, $feed_nid = 0) {
  $batch = array(
    'title' => $title,
    'operations' => array(
      array('feeds_batch', array($method, $importer_id, $feed_nid)),
    ),
    'progress_message' => '',
  );
  batch_set($batch);
}

/**
 * Batch callback.
 *
 * @param $method
 *   Method to execute on importer; one of 'import' or 'clear'.
 * @param $importer_id
 *   Identifier of a FeedsImporter object.
 * @param $feed_nid
 *   If importer is attached to content type, feed node id identifying the
 *   source to be imported.
 * @param $context
 *   Batch context.
 */
function feeds_batch($method, $importer_id, $feed_nid = 0, &$context) {
  $context['finished'] = 1;
  try {
    $context['finished'] = feeds_source($importer_id, $feed_nid)->$method();
  }
  catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * @}
 */

/**
 * @defgroup utility Utility functions
 * @{
 */

/**
 * Loads all importers.
 *
 * @param $load_disabled
 *   Pass TRUE to load all importers, enabled or disabled, pass FALSE to only
 *   retrieve enabled importers.
 *
 * @return
 *   An array of all feed configurations available.
 */
function feeds_importer_load_all($load_disabled = FALSE) {
  $feeds = array();
  // This function can get called very early in install process through
  // menu_router_rebuild(). Do not try to include CTools if not available.
  if (function_exists('ctools_include')) {
    ctools_include('export');
    $configs = ctools_export_load_object('feeds_importer', 'all');
    foreach ($configs as $config) {
      if (!empty($config->id) && ($load_disabled || empty($config->disabled))) {
        $feeds[$config->id] = feeds_importer($config->id);
      }
    }
  }
  return $feeds;
}

/**
 * Gets an array of enabled importer ids.
 *
 * @return
 *   An array where the values contain ids of enabled importers.
 */
function feeds_enabled_importers() {
  return array_keys(_feeds_importer_digest());
}

/**
 * Gets an enabled importer configuration by content type.
 *
 * @param $content_type
 *   A node type string.
 *
 * @return
 *   A FeedsImporter id if there is an importer for the given content type,
 *   FALSE otherwise.
 */
function feeds_get_importer_id($content_type) {
  $importers = array_flip(_feeds_importer_digest());
  return isset($importers[$content_type]) ? $importers[$content_type] : FALSE;
}

/**
 * Helper function for feeds_get_importer_id() and feeds_enabled_importers().
 */
function _feeds_importer_digest() {
  $importers = &drupal_static(__FUNCTION__);
  if ($importers === NULL) {
    if ($cache = cache_get(__FUNCTION__)) {
      $importers = $cache->data;
    }
    else {
      $importers = array();
      foreach (feeds_importer_load_all() as $importer) {
        $importers[$importer->id] = isset($importer->config['content_type']) ? $importer->config['content_type'] : '';
      }
      cache_set(__FUNCTION__, $importers);
    }
  }
  return $importers;
}

/**
 * Resets importer caches. Call when enabling/disabling importers.
 */
function feeds_cache_clear($rebuild_menu = TRUE) {
  cache_clear_all('_feeds_importer_digest', 'cache');
  drupal_static_reset('_feeds_importer_digest');
  ctools_include('export');
  ctools_export_load_object_reset('feeds_importer');
  drupal_static_reset('_node_types_build');
  if ($rebuild_menu) {
    menu_rebuild();
  }
}

/**
 * Exports a FeedsImporter configuration to code.
 */
function feeds_export($importer_id, $indent = '') {
  ctools_include('export');
  $result = ctools_export_load_object('feeds_importer', 'names', array('id' => $importer_id));
  if (isset($result[$importer_id])) {
    return ctools_export_object('feeds_importer', $result[$importer_id], $indent);
  }
}

/**
 * Logs to a file like /mytmp/feeds_my_domain_org.log in temporary directory.
 */
function feeds_dbg($msg) {
  if (variable_get('feeds_debug', false)) {
    if (!is_string($msg)) {
      $msg = var_export($msg, true);
    }
    $filename = trim(str_replace('/', '_', $_SERVER['HTTP_HOST'] . base_path()), '_');
    $handle = fopen(file_directory_temp() ."/feeds_$filename.log", 'a');
    fwrite($handle, date('c') ."\t$msg\n");
    fclose($handle);
  }
}

/**
 * @}
 */

/**
 * @defgroup instantiators Instantiators
 * @{
 */

/**
 * Gets an importer instance.
 *
 * @param $id
 *   The unique id of the importer object.
 *
 * @return
 *   A FeedsImporter object or an object of a class defined by the Drupal
 *   variable 'feeds_importer_class'. There is only one importer object
 *   per $id system-wide.
 */
function feeds_importer($id) {
  return FeedsConfigurable::instance(variable_get('feeds_importer_class', 'FeedsImporter'), $id);
}

/**
 * Gets an instance of a source object.
 *
 * @param $importer_id
 *   A FeedsImporter id.
 * @param $feed_nid
 *   The node id of a feed node if the source is attached to a feed node.
 *
 * @return
 *   A FeedsSource object or an object of a class defiend by the Drupal
 *   variable 'source_class'.
 */
function feeds_source($importer_id, $feed_nid = 0) {
  return FeedsSource::instance($importer_id, $feed_nid);
}

/**
 * Gets an instance of a class for a given plugin and id.
 *
 * @param $plugin
 *   A string that is the key of the plugin to load.
 * @param $id
 *   A string that is the id of the object.
 *
 * @return
 *   A FeedsPlugin object.
 *
 * @throws Exception
 *   If plugin can't be instantiated.
 */
function feeds_plugin($plugin, $id) {
  ctools_include('plugins');
  if ($class = ctools_plugin_load_class('feeds', 'plugins', $plugin, 'handler')) {
    return FeedsConfigurable::instance($class, $id);
  }
  $args = array( '%plugin' => $plugin);
  if (user_access('administer feeds')) {
    $args['!link'] = l($id, 'admin/structure/feeds/edit/' . $id);
    drupal_set_message(t('Missing Feeds plugin %plugin. See !link. Check whether all required libraries and modules are installed properly.', $args), 'warning');
  }
  else {
    drupal_set_message(t('Missing Feeds plugin %plugin. Please contact your site administrator.', $args), 'warning');
  }
  $class = ctools_plugin_load_class('feeds', 'plugins', 'FeedsMissingPlugin', 'handler');
  return FeedsConfigurable::instance($class, $id);
}

/**
 * @}
 */

/**
 * @defgroup include Funtions for loading libraries
 * @{
 */

/**
 * Includes a library file.
 *
 * @param $file
 *   The filename to load from.
 * @param $library
 *   The name of the library. If libraries module is installed,
 *   feeds_include_library() will look for libraries with this name managed by
 *   libraries module.
 */
function feeds_include_library($file, $library) {
  static $included = array();
  if (!isset($included[$file])) {
    // Try first whether libraries module is present and load the file from
    // there. If this fails, require the library from the local path.
    if (module_exists('libraries') && file_exists(libraries_get_path($library) . "/$file")) {
      require libraries_get_path($library) ."/$file";
    }
    else {
      require DRUPAL_ROOT . '/' . drupal_get_path('module', 'feeds') . "/libraries/$file";
    }
  }
  $included[$file] = TRUE;
}

/**
 * Checks whether a library is present.
 *
 * @param $file
 *   The filename to load from.
 * @param $library
 *   The name of the library. If libraries module is installed,
 *   feeds_library_exists() will look for libraries with this name managed by
 *   libraries module.
 */
function feeds_library_exists($file, $library) {
  if (module_exists('libraries') && file_exists(libraries_get_path($library) . "/$file")) {
    return TRUE;
  }
  elseif (file_exists(DRUPAL_ROOT . '/' . drupal_get_path('module', 'feeds') . "/libraries/$file")) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Simplified drupal_alter().
 *
 * - None of that 'multiple parameters by ref' crazyness.
 * - Don't use module_implements() to allow hot including on behalf
 *   implementations (see mappers/).
 */
function feeds_alter($type, &$data) {
  $args = array(&$data);
  $additional_args = func_get_args();
  array_shift($additional_args);
  array_shift($additional_args);
  $args = array_merge($args, $additional_args);

  $list = module_list();
  foreach (module_list() as $module) {
    $function = $module .'_'. $type .'_alter';
    if (function_exists($function)) {
      call_user_func_array($function, $args);
    }
  }
}

/**
 * @}
 */
